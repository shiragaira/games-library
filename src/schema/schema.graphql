schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
columns and relationships of "games_library.GameClients"
"""
type gameClients {
  id: Int!
  name: String!

  """An array relationship"""
  userGames(
    """distinct select on columns"""
    distinct_on: [userGames_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [userGames_order_by!]

    """filter the rows returned"""
    where: userGames_bool_exp
  ): [userGames!]!

  """An aggregate relationship"""
  userGames_aggregate(
    """distinct select on columns"""
    distinct_on: [userGames_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [userGames_order_by!]

    """filter the rows returned"""
    where: userGames_bool_exp
  ): userGames_aggregate!
  uuid: uuid!
}

"""
aggregated selection of "games_library.GameClients"
"""
type gameClients_aggregate {
  aggregate: gameClients_aggregate_fields
  nodes: [gameClients!]!
}

"""
aggregate fields of "games_library.GameClients"
"""
type gameClients_aggregate_fields {
  avg: gameClients_avg_fields
  count(columns: [gameClients_select_column!], distinct: Boolean): Int!
  max: gameClients_max_fields
  min: gameClients_min_fields
  stddev: gameClients_stddev_fields
  stddev_pop: gameClients_stddev_pop_fields
  stddev_samp: gameClients_stddev_samp_fields
  sum: gameClients_sum_fields
  var_pop: gameClients_var_pop_fields
  var_samp: gameClients_var_samp_fields
  variance: gameClients_variance_fields
}

"""aggregate avg on columns"""
type gameClients_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "games_library.GameClients". All fields are combined with a logical 'AND'.
"""
input gameClients_bool_exp {
  _and: [gameClients_bool_exp!]
  _not: gameClients_bool_exp
  _or: [gameClients_bool_exp!]
  id: Int_comparison_exp
  name: String_comparison_exp
  userGames: userGames_bool_exp
  userGames_aggregate: userGames_aggregate_bool_exp
  uuid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "games_library.GameClients"
"""
enum gameClients_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  GameClients_pkey
}

"""
input type for incrementing numeric columns in table "games_library.GameClients"
"""
input gameClients_inc_input {
  id: Int
}

"""
input type for inserting data into table "games_library.GameClients"
"""
input gameClients_insert_input {
  id: Int
  name: String
  userGames: userGames_arr_rel_insert_input
  uuid: uuid
}

"""aggregate max on columns"""
type gameClients_max_fields {
  id: Int
  name: String
  uuid: uuid
}

"""aggregate min on columns"""
type gameClients_min_fields {
  id: Int
  name: String
  uuid: uuid
}

"""
response of any mutation on the table "games_library.GameClients"
"""
type gameClients_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [gameClients!]!
}

"""
input type for inserting object relation for remote table "games_library.GameClients"
"""
input gameClients_obj_rel_insert_input {
  data: gameClients_insert_input!

  """upsert condition"""
  on_conflict: gameClients_on_conflict
}

"""
on_conflict condition type for table "games_library.GameClients"
"""
input gameClients_on_conflict {
  constraint: gameClients_constraint!
  update_columns: [gameClients_update_column!]! = []
  where: gameClients_bool_exp
}

"""Ordering options when selecting data from "games_library.GameClients"."""
input gameClients_order_by {
  id: order_by
  name: order_by
  userGames_aggregate: userGames_aggregate_order_by
  uuid: order_by
}

"""primary key columns input for table: games_library.GameClients"""
input gameClients_pk_columns_input {
  id: Int!
}

"""
select columns of table "games_library.GameClients"
"""
enum gameClients_select_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  uuid
}

"""
input type for updating data in table "games_library.GameClients"
"""
input gameClients_set_input {
  id: Int
  name: String
  uuid: uuid
}

"""aggregate stddev on columns"""
type gameClients_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type gameClients_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type gameClients_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "gameClients"
"""
input gameClients_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: gameClients_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input gameClients_stream_cursor_value_input {
  id: Int
  name: String
  uuid: uuid
}

"""aggregate sum on columns"""
type gameClients_sum_fields {
  id: Int
}

"""
update columns of table "games_library.GameClients"
"""
enum gameClients_update_column {
  """column name"""
  id

  """column name"""
  name

  """column name"""
  uuid
}

input gameClients_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: gameClients_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: gameClients_set_input

  """filter the rows which have to be updated"""
  where: gameClients_bool_exp!
}

"""aggregate var_pop on columns"""
type gameClients_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type gameClients_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type gameClients_variance_fields {
  id: Float
}

"""
columns and relationships of "games_library.GameStatuses"
"""
type gameStatuses {
  id: String!

  """An array relationship"""
  userGames(
    """distinct select on columns"""
    distinct_on: [userGames_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [userGames_order_by!]

    """filter the rows returned"""
    where: userGames_bool_exp
  ): [userGames!]!

  """An aggregate relationship"""
  userGames_aggregate(
    """distinct select on columns"""
    distinct_on: [userGames_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [userGames_order_by!]

    """filter the rows returned"""
    where: userGames_bool_exp
  ): userGames_aggregate!
}

"""
aggregated selection of "games_library.GameStatuses"
"""
type gameStatuses_aggregate {
  aggregate: gameStatuses_aggregate_fields
  nodes: [gameStatuses!]!
}

"""
aggregate fields of "games_library.GameStatuses"
"""
type gameStatuses_aggregate_fields {
  count(columns: [gameStatuses_select_column!], distinct: Boolean): Int!
  max: gameStatuses_max_fields
  min: gameStatuses_min_fields
}

"""
Boolean expression to filter rows from the table "games_library.GameStatuses". All fields are combined with a logical 'AND'.
"""
input gameStatuses_bool_exp {
  _and: [gameStatuses_bool_exp!]
  _not: gameStatuses_bool_exp
  _or: [gameStatuses_bool_exp!]
  id: String_comparison_exp
  userGames: userGames_bool_exp
  userGames_aggregate: userGames_aggregate_bool_exp
}

"""
unique or primary key constraints on table "games_library.GameStatuses"
"""
enum gameStatuses_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  GameStatuses_pkey
}

enum gameStatuses_enum {
  abadoned
  backlog
  completed
  in_progress
}

"""
Boolean expression to compare columns of type "gameStatuses_enum". All fields are combined with logical 'AND'.
"""
input gameStatuses_enum_comparison_exp {
  _eq: gameStatuses_enum
  _in: [gameStatuses_enum!]
  _is_null: Boolean
  _neq: gameStatuses_enum
  _nin: [gameStatuses_enum!]
}

"""
input type for inserting data into table "games_library.GameStatuses"
"""
input gameStatuses_insert_input {
  id: String
  userGames: userGames_arr_rel_insert_input
}

"""aggregate max on columns"""
type gameStatuses_max_fields {
  id: String
}

"""aggregate min on columns"""
type gameStatuses_min_fields {
  id: String
}

"""
response of any mutation on the table "games_library.GameStatuses"
"""
type gameStatuses_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [gameStatuses!]!
}

"""
on_conflict condition type for table "games_library.GameStatuses"
"""
input gameStatuses_on_conflict {
  constraint: gameStatuses_constraint!
  update_columns: [gameStatuses_update_column!]! = []
  where: gameStatuses_bool_exp
}

"""
Ordering options when selecting data from "games_library.GameStatuses".
"""
input gameStatuses_order_by {
  id: order_by
  userGames_aggregate: userGames_aggregate_order_by
}

"""primary key columns input for table: games_library.GameStatuses"""
input gameStatuses_pk_columns_input {
  id: String!
}

"""
select columns of table "games_library.GameStatuses"
"""
enum gameStatuses_select_column {
  """column name"""
  id
}

"""
input type for updating data in table "games_library.GameStatuses"
"""
input gameStatuses_set_input {
  id: String
}

"""
Streaming cursor of the table "gameStatuses"
"""
input gameStatuses_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: gameStatuses_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input gameStatuses_stream_cursor_value_input {
  id: String
}

"""
update columns of table "games_library.GameStatuses"
"""
enum gameStatuses_update_column {
  """column name"""
  id
}

input gameStatuses_updates {
  """sets the columns of the filtered rows to the given values"""
  _set: gameStatuses_set_input

  """filter the rows which have to be updated"""
  where: gameStatuses_bool_exp!
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "games_library.GameClients"
  """
  delete_gameClients(
    """filter the rows which have to be deleted"""
    where: gameClients_bool_exp!
  ): gameClients_mutation_response

  """
  delete single row from the table: "games_library.GameClients"
  """
  delete_gameClients_by_pk(id: Int!): gameClients

  """
  delete data from the table: "games_library.GameStatuses"
  """
  delete_gameStatuses(
    """filter the rows which have to be deleted"""
    where: gameStatuses_bool_exp!
  ): gameStatuses_mutation_response

  """
  delete single row from the table: "games_library.GameStatuses"
  """
  delete_gameStatuses_by_pk(id: String!): gameStatuses

  """
  delete data from the table: "games_library.UserGames"
  """
  delete_userGames(
    """filter the rows which have to be deleted"""
    where: userGames_bool_exp!
  ): userGames_mutation_response

  """
  delete single row from the table: "games_library.UserGames"
  """
  delete_userGames_by_pk(id: Int!): userGames

  """
  insert data into the table: "games_library.GameClients"
  """
  insert_gameClients(
    """the rows to be inserted"""
    objects: [gameClients_insert_input!]!

    """upsert condition"""
    on_conflict: gameClients_on_conflict
  ): gameClients_mutation_response

  """
  insert a single row into the table: "games_library.GameClients"
  """
  insert_gameClients_one(
    """the row to be inserted"""
    object: gameClients_insert_input!

    """upsert condition"""
    on_conflict: gameClients_on_conflict
  ): gameClients

  """
  insert data into the table: "games_library.GameStatuses"
  """
  insert_gameStatuses(
    """the rows to be inserted"""
    objects: [gameStatuses_insert_input!]!

    """upsert condition"""
    on_conflict: gameStatuses_on_conflict
  ): gameStatuses_mutation_response

  """
  insert a single row into the table: "games_library.GameStatuses"
  """
  insert_gameStatuses_one(
    """the row to be inserted"""
    object: gameStatuses_insert_input!

    """upsert condition"""
    on_conflict: gameStatuses_on_conflict
  ): gameStatuses

  """
  insert data into the table: "games_library.UserGames"
  """
  insert_userGames(
    """the rows to be inserted"""
    objects: [userGames_insert_input!]!

    """upsert condition"""
    on_conflict: userGames_on_conflict
  ): userGames_mutation_response

  """
  insert a single row into the table: "games_library.UserGames"
  """
  insert_userGames_one(
    """the row to be inserted"""
    object: userGames_insert_input!

    """upsert condition"""
    on_conflict: userGames_on_conflict
  ): userGames

  """
  update data of the table: "games_library.GameClients"
  """
  update_gameClients(
    """increments the numeric columns with given value of the filtered values"""
    _inc: gameClients_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: gameClients_set_input

    """filter the rows which have to be updated"""
    where: gameClients_bool_exp!
  ): gameClients_mutation_response

  """
  update single row of the table: "games_library.GameClients"
  """
  update_gameClients_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: gameClients_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: gameClients_set_input
    pk_columns: gameClients_pk_columns_input!
  ): gameClients

  """
  update multiples rows of table: "games_library.GameClients"
  """
  update_gameClients_many(
    """updates to execute, in order"""
    updates: [gameClients_updates!]!
  ): [gameClients_mutation_response]

  """
  update data of the table: "games_library.GameStatuses"
  """
  update_gameStatuses(
    """sets the columns of the filtered rows to the given values"""
    _set: gameStatuses_set_input

    """filter the rows which have to be updated"""
    where: gameStatuses_bool_exp!
  ): gameStatuses_mutation_response

  """
  update single row of the table: "games_library.GameStatuses"
  """
  update_gameStatuses_by_pk(
    """sets the columns of the filtered rows to the given values"""
    _set: gameStatuses_set_input
    pk_columns: gameStatuses_pk_columns_input!
  ): gameStatuses

  """
  update multiples rows of table: "games_library.GameStatuses"
  """
  update_gameStatuses_many(
    """updates to execute, in order"""
    updates: [gameStatuses_updates!]!
  ): [gameStatuses_mutation_response]

  """
  update data of the table: "games_library.UserGames"
  """
  update_userGames(
    """increments the numeric columns with given value of the filtered values"""
    _inc: userGames_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: userGames_set_input

    """filter the rows which have to be updated"""
    where: userGames_bool_exp!
  ): userGames_mutation_response

  """
  update single row of the table: "games_library.UserGames"
  """
  update_userGames_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: userGames_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: userGames_set_input
    pk_columns: userGames_pk_columns_input!
  ): userGames

  """
  update multiples rows of table: "games_library.UserGames"
  """
  update_userGames_many(
    """updates to execute, in order"""
    updates: [userGames_updates!]!
  ): [userGames_mutation_response]
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "games_library.GameClients"
  """
  gameClients(
    """distinct select on columns"""
    distinct_on: [gameClients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gameClients_order_by!]

    """filter the rows returned"""
    where: gameClients_bool_exp
  ): [gameClients!]!

  """
  fetch aggregated fields from the table: "games_library.GameClients"
  """
  gameClients_aggregate(
    """distinct select on columns"""
    distinct_on: [gameClients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gameClients_order_by!]

    """filter the rows returned"""
    where: gameClients_bool_exp
  ): gameClients_aggregate!

  """
  fetch data from the table: "games_library.GameClients" using primary key columns
  """
  gameClients_by_pk(id: Int!): gameClients

  """
  fetch data from the table: "games_library.GameStatuses"
  """
  gameStatuses(
    """distinct select on columns"""
    distinct_on: [gameStatuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gameStatuses_order_by!]

    """filter the rows returned"""
    where: gameStatuses_bool_exp
  ): [gameStatuses!]!

  """
  fetch aggregated fields from the table: "games_library.GameStatuses"
  """
  gameStatuses_aggregate(
    """distinct select on columns"""
    distinct_on: [gameStatuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gameStatuses_order_by!]

    """filter the rows returned"""
    where: gameStatuses_bool_exp
  ): gameStatuses_aggregate!

  """
  fetch data from the table: "games_library.GameStatuses" using primary key columns
  """
  gameStatuses_by_pk(id: String!): gameStatuses

  """An array relationship"""
  userGames(
    """distinct select on columns"""
    distinct_on: [userGames_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [userGames_order_by!]

    """filter the rows returned"""
    where: userGames_bool_exp
  ): [userGames!]!

  """An aggregate relationship"""
  userGames_aggregate(
    """distinct select on columns"""
    distinct_on: [userGames_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [userGames_order_by!]

    """filter the rows returned"""
    where: userGames_bool_exp
  ): userGames_aggregate!

  """
  fetch data from the table: "games_library.UserGames" using primary key columns
  """
  userGames_by_pk(id: Int!): userGames
}

type subscription_root {
  """
  fetch data from the table: "games_library.GameClients"
  """
  gameClients(
    """distinct select on columns"""
    distinct_on: [gameClients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gameClients_order_by!]

    """filter the rows returned"""
    where: gameClients_bool_exp
  ): [gameClients!]!

  """
  fetch aggregated fields from the table: "games_library.GameClients"
  """
  gameClients_aggregate(
    """distinct select on columns"""
    distinct_on: [gameClients_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gameClients_order_by!]

    """filter the rows returned"""
    where: gameClients_bool_exp
  ): gameClients_aggregate!

  """
  fetch data from the table: "games_library.GameClients" using primary key columns
  """
  gameClients_by_pk(id: Int!): gameClients

  """
  fetch data from the table in a streaming manner: "games_library.GameClients"
  """
  gameClients_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [gameClients_stream_cursor_input]!

    """filter the rows returned"""
    where: gameClients_bool_exp
  ): [gameClients!]!

  """
  fetch data from the table: "games_library.GameStatuses"
  """
  gameStatuses(
    """distinct select on columns"""
    distinct_on: [gameStatuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gameStatuses_order_by!]

    """filter the rows returned"""
    where: gameStatuses_bool_exp
  ): [gameStatuses!]!

  """
  fetch aggregated fields from the table: "games_library.GameStatuses"
  """
  gameStatuses_aggregate(
    """distinct select on columns"""
    distinct_on: [gameStatuses_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [gameStatuses_order_by!]

    """filter the rows returned"""
    where: gameStatuses_bool_exp
  ): gameStatuses_aggregate!

  """
  fetch data from the table: "games_library.GameStatuses" using primary key columns
  """
  gameStatuses_by_pk(id: String!): gameStatuses

  """
  fetch data from the table in a streaming manner: "games_library.GameStatuses"
  """
  gameStatuses_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [gameStatuses_stream_cursor_input]!

    """filter the rows returned"""
    where: gameStatuses_bool_exp
  ): [gameStatuses!]!

  """An array relationship"""
  userGames(
    """distinct select on columns"""
    distinct_on: [userGames_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [userGames_order_by!]

    """filter the rows returned"""
    where: userGames_bool_exp
  ): [userGames!]!

  """An aggregate relationship"""
  userGames_aggregate(
    """distinct select on columns"""
    distinct_on: [userGames_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [userGames_order_by!]

    """filter the rows returned"""
    where: userGames_bool_exp
  ): userGames_aggregate!

  """
  fetch data from the table: "games_library.UserGames" using primary key columns
  """
  userGames_by_pk(id: Int!): userGames

  """
  fetch data from the table in a streaming manner: "games_library.UserGames"
  """
  userGames_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [userGames_stream_cursor_input]!

    """filter the rows returned"""
    where: userGames_bool_exp
  ): [userGames!]!
}

"""
columns and relationships of "games_library.UserGames"
"""
type userGames {
  assigned_at: date!
  client_id: Int

  """An object relationship"""
  gameClient: gameClients
  game_id: Int!
  id: Int!
  platform_id: Int!
  purchase_price: numeric
  status: gameStatuses_enum
  uuid: uuid!
}

"""
aggregated selection of "games_library.UserGames"
"""
type userGames_aggregate {
  aggregate: userGames_aggregate_fields
  nodes: [userGames!]!
}

input userGames_aggregate_bool_exp {
  count: userGames_aggregate_bool_exp_count
}

input userGames_aggregate_bool_exp_count {
  arguments: [userGames_select_column!]
  distinct: Boolean
  filter: userGames_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "games_library.UserGames"
"""
type userGames_aggregate_fields {
  avg: userGames_avg_fields
  count(columns: [userGames_select_column!], distinct: Boolean): Int!
  max: userGames_max_fields
  min: userGames_min_fields
  stddev: userGames_stddev_fields
  stddev_pop: userGames_stddev_pop_fields
  stddev_samp: userGames_stddev_samp_fields
  sum: userGames_sum_fields
  var_pop: userGames_var_pop_fields
  var_samp: userGames_var_samp_fields
  variance: userGames_variance_fields
}

"""
order by aggregate values of table "games_library.UserGames"
"""
input userGames_aggregate_order_by {
  avg: userGames_avg_order_by
  count: order_by
  max: userGames_max_order_by
  min: userGames_min_order_by
  stddev: userGames_stddev_order_by
  stddev_pop: userGames_stddev_pop_order_by
  stddev_samp: userGames_stddev_samp_order_by
  sum: userGames_sum_order_by
  var_pop: userGames_var_pop_order_by
  var_samp: userGames_var_samp_order_by
  variance: userGames_variance_order_by
}

"""
input type for inserting array relation for remote table "games_library.UserGames"
"""
input userGames_arr_rel_insert_input {
  data: [userGames_insert_input!]!

  """upsert condition"""
  on_conflict: userGames_on_conflict
}

"""aggregate avg on columns"""
type userGames_avg_fields {
  client_id: Float
  game_id: Float
  id: Float
  platform_id: Float
  purchase_price: Float
}

"""
order by avg() on columns of table "games_library.UserGames"
"""
input userGames_avg_order_by {
  client_id: order_by
  game_id: order_by
  id: order_by
  platform_id: order_by
  purchase_price: order_by
}

"""
Boolean expression to filter rows from the table "games_library.UserGames". All fields are combined with a logical 'AND'.
"""
input userGames_bool_exp {
  _and: [userGames_bool_exp!]
  _not: userGames_bool_exp
  _or: [userGames_bool_exp!]
  assigned_at: date_comparison_exp
  client_id: Int_comparison_exp
  gameClient: gameClients_bool_exp
  game_id: Int_comparison_exp
  id: Int_comparison_exp
  platform_id: Int_comparison_exp
  purchase_price: numeric_comparison_exp
  status: gameStatuses_enum_comparison_exp
  uuid: uuid_comparison_exp
}

"""
unique or primary key constraints on table "games_library.UserGames"
"""
enum userGames_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  UserGames_pkey
}

"""
input type for incrementing numeric columns in table "games_library.UserGames"
"""
input userGames_inc_input {
  client_id: Int
  game_id: Int
  id: Int
  platform_id: Int
  purchase_price: numeric
}

"""
input type for inserting data into table "games_library.UserGames"
"""
input userGames_insert_input {
  assigned_at: date
  client_id: Int
  gameClient: gameClients_obj_rel_insert_input
  game_id: Int
  id: Int
  platform_id: Int
  purchase_price: numeric
  status: gameStatuses_enum
  uuid: uuid
}

"""aggregate max on columns"""
type userGames_max_fields {
  assigned_at: date
  client_id: Int
  game_id: Int
  id: Int
  platform_id: Int
  purchase_price: numeric
  uuid: uuid
}

"""
order by max() on columns of table "games_library.UserGames"
"""
input userGames_max_order_by {
  assigned_at: order_by
  client_id: order_by
  game_id: order_by
  id: order_by
  platform_id: order_by
  purchase_price: order_by
  uuid: order_by
}

"""aggregate min on columns"""
type userGames_min_fields {
  assigned_at: date
  client_id: Int
  game_id: Int
  id: Int
  platform_id: Int
  purchase_price: numeric
  uuid: uuid
}

"""
order by min() on columns of table "games_library.UserGames"
"""
input userGames_min_order_by {
  assigned_at: order_by
  client_id: order_by
  game_id: order_by
  id: order_by
  platform_id: order_by
  purchase_price: order_by
  uuid: order_by
}

"""
response of any mutation on the table "games_library.UserGames"
"""
type userGames_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [userGames!]!
}

"""
on_conflict condition type for table "games_library.UserGames"
"""
input userGames_on_conflict {
  constraint: userGames_constraint!
  update_columns: [userGames_update_column!]! = []
  where: userGames_bool_exp
}

"""Ordering options when selecting data from "games_library.UserGames"."""
input userGames_order_by {
  assigned_at: order_by
  client_id: order_by
  gameClient: gameClients_order_by
  game_id: order_by
  id: order_by
  platform_id: order_by
  purchase_price: order_by
  status: order_by
  uuid: order_by
}

"""primary key columns input for table: games_library.UserGames"""
input userGames_pk_columns_input {
  id: Int!
}

"""
select columns of table "games_library.UserGames"
"""
enum userGames_select_column {
  """column name"""
  assigned_at

  """column name"""
  client_id

  """column name"""
  game_id

  """column name"""
  id

  """column name"""
  platform_id

  """column name"""
  purchase_price

  """column name"""
  status

  """column name"""
  uuid
}

"""
input type for updating data in table "games_library.UserGames"
"""
input userGames_set_input {
  assigned_at: date
  client_id: Int
  game_id: Int
  id: Int
  platform_id: Int
  purchase_price: numeric
  status: gameStatuses_enum
  uuid: uuid
}

"""aggregate stddev on columns"""
type userGames_stddev_fields {
  client_id: Float
  game_id: Float
  id: Float
  platform_id: Float
  purchase_price: Float
}

"""
order by stddev() on columns of table "games_library.UserGames"
"""
input userGames_stddev_order_by {
  client_id: order_by
  game_id: order_by
  id: order_by
  platform_id: order_by
  purchase_price: order_by
}

"""aggregate stddev_pop on columns"""
type userGames_stddev_pop_fields {
  client_id: Float
  game_id: Float
  id: Float
  platform_id: Float
  purchase_price: Float
}

"""
order by stddev_pop() on columns of table "games_library.UserGames"
"""
input userGames_stddev_pop_order_by {
  client_id: order_by
  game_id: order_by
  id: order_by
  platform_id: order_by
  purchase_price: order_by
}

"""aggregate stddev_samp on columns"""
type userGames_stddev_samp_fields {
  client_id: Float
  game_id: Float
  id: Float
  platform_id: Float
  purchase_price: Float
}

"""
order by stddev_samp() on columns of table "games_library.UserGames"
"""
input userGames_stddev_samp_order_by {
  client_id: order_by
  game_id: order_by
  id: order_by
  platform_id: order_by
  purchase_price: order_by
}

"""
Streaming cursor of the table "userGames"
"""
input userGames_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: userGames_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input userGames_stream_cursor_value_input {
  assigned_at: date
  client_id: Int
  game_id: Int
  id: Int
  platform_id: Int
  purchase_price: numeric
  status: gameStatuses_enum
  uuid: uuid
}

"""aggregate sum on columns"""
type userGames_sum_fields {
  client_id: Int
  game_id: Int
  id: Int
  platform_id: Int
  purchase_price: numeric
}

"""
order by sum() on columns of table "games_library.UserGames"
"""
input userGames_sum_order_by {
  client_id: order_by
  game_id: order_by
  id: order_by
  platform_id: order_by
  purchase_price: order_by
}

"""
update columns of table "games_library.UserGames"
"""
enum userGames_update_column {
  """column name"""
  assigned_at

  """column name"""
  client_id

  """column name"""
  game_id

  """column name"""
  id

  """column name"""
  platform_id

  """column name"""
  purchase_price

  """column name"""
  status

  """column name"""
  uuid
}

input userGames_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: userGames_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: userGames_set_input

  """filter the rows which have to be updated"""
  where: userGames_bool_exp!
}

"""aggregate var_pop on columns"""
type userGames_var_pop_fields {
  client_id: Float
  game_id: Float
  id: Float
  platform_id: Float
  purchase_price: Float
}

"""
order by var_pop() on columns of table "games_library.UserGames"
"""
input userGames_var_pop_order_by {
  client_id: order_by
  game_id: order_by
  id: order_by
  platform_id: order_by
  purchase_price: order_by
}

"""aggregate var_samp on columns"""
type userGames_var_samp_fields {
  client_id: Float
  game_id: Float
  id: Float
  platform_id: Float
  purchase_price: Float
}

"""
order by var_samp() on columns of table "games_library.UserGames"
"""
input userGames_var_samp_order_by {
  client_id: order_by
  game_id: order_by
  id: order_by
  platform_id: order_by
  purchase_price: order_by
}

"""aggregate variance on columns"""
type userGames_variance_fields {
  client_id: Float
  game_id: Float
  id: Float
  platform_id: Float
  purchase_price: Float
}

"""
order by variance() on columns of table "games_library.UserGames"
"""
input userGames_variance_order_by {
  client_id: order_by
  game_id: order_by
  id: order_by
  platform_id: order_by
  purchase_price: order_by
}

scalar uuid

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input uuid_comparison_exp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _is_null: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}