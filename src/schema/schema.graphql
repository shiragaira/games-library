schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""ordering argument of a cursor"""
enum cursor_ordering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

scalar date

"""
Boolean expression to compare columns of type "date". All fields are combined with logical 'AND'.
"""
input date_comparison_exp {
  _eq: date
  _gt: date
  _gte: date
  _in: [date!]
  _is_null: Boolean
  _lt: date
  _lte: date
  _neq: date
  _nin: [date!]
}

"""
columns and relationships of "games_library.devices"
"""
type devices {
  """An array relationship"""
  games(
    """distinct select on columns"""
    distinct_on: [games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [games_order_by!]

    """filter the rows returned"""
    where: games_bool_exp
  ): [games!]!

  """An aggregate relationship"""
  games_aggregate(
    """distinct select on columns"""
    distinct_on: [games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [games_order_by!]

    """filter the rows returned"""
    where: games_bool_exp
  ): games_aggregate!
  id: Int!
  name: String!
}

"""
aggregated selection of "games_library.devices"
"""
type devices_aggregate {
  aggregate: devices_aggregate_fields
  nodes: [devices!]!
}

"""
aggregate fields of "games_library.devices"
"""
type devices_aggregate_fields {
  avg: devices_avg_fields
  count(columns: [devices_select_column!], distinct: Boolean): Int!
  max: devices_max_fields
  min: devices_min_fields
  stddev: devices_stddev_fields
  stddev_pop: devices_stddev_pop_fields
  stddev_samp: devices_stddev_samp_fields
  sum: devices_sum_fields
  var_pop: devices_var_pop_fields
  var_samp: devices_var_samp_fields
  variance: devices_variance_fields
}

"""aggregate avg on columns"""
type devices_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "games_library.devices". All fields are combined with a logical 'AND'.
"""
input devices_bool_exp {
  _and: [devices_bool_exp!]
  _not: devices_bool_exp
  _or: [devices_bool_exp!]
  games: games_bool_exp
  games_aggregate: games_aggregate_bool_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "games_library.devices"
"""
enum devices_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  systems_name_key

  """
  unique or primary key constraint on columns "id"
  """
  systems_pkey
}

"""
input type for incrementing numeric columns in table "games_library.devices"
"""
input devices_inc_input {
  id: Int
}

"""
input type for inserting data into table "games_library.devices"
"""
input devices_insert_input {
  games: games_arr_rel_insert_input
  id: Int
  name: String
}

"""aggregate max on columns"""
type devices_max_fields {
  id: Int
  name: String
}

"""aggregate min on columns"""
type devices_min_fields {
  id: Int
  name: String
}

"""
response of any mutation on the table "games_library.devices"
"""
type devices_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [devices!]!
}

"""
input type for inserting object relation for remote table "games_library.devices"
"""
input devices_obj_rel_insert_input {
  data: devices_insert_input!

  """upsert condition"""
  on_conflict: devices_on_conflict
}

"""
on_conflict condition type for table "games_library.devices"
"""
input devices_on_conflict {
  constraint: devices_constraint!
  update_columns: [devices_update_column!]! = []
  where: devices_bool_exp
}

"""Ordering options when selecting data from "games_library.devices"."""
input devices_order_by {
  games_aggregate: games_aggregate_order_by
  id: order_by
  name: order_by
}

"""primary key columns input for table: games_library.devices"""
input devices_pk_columns_input {
  id: Int!
}

"""
select columns of table "games_library.devices"
"""
enum devices_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "games_library.devices"
"""
input devices_set_input {
  id: Int
  name: String
}

"""aggregate stddev on columns"""
type devices_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type devices_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type devices_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "devices"
"""
input devices_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: devices_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input devices_stream_cursor_value_input {
  id: Int
  name: String
}

"""aggregate sum on columns"""
type devices_sum_fields {
  id: Int
}

"""
update columns of table "games_library.devices"
"""
enum devices_update_column {
  """column name"""
  id

  """column name"""
  name
}

input devices_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: devices_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: devices_set_input

  """filter the rows which have to be updated"""
  where: devices_bool_exp!
}

"""aggregate var_pop on columns"""
type devices_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type devices_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type devices_variance_fields {
  id: Float
}

"""
columns and relationships of "games_library.games"
"""
type games {
  cover_image_url: String
  created_at: timestamptz!

  """An object relationship"""
  device: devices
  device_id: Int
  id: Int!

  """An object relationship"""
  platform: platforms
  platform_id: Int
  purchase_date: date
  purchase_price: money
  title: String!
  updated_at: timestamptz!
}

"""
aggregated selection of "games_library.games"
"""
type games_aggregate {
  aggregate: games_aggregate_fields
  nodes: [games!]!
}

input games_aggregate_bool_exp {
  count: games_aggregate_bool_exp_count
}

input games_aggregate_bool_exp_count {
  arguments: [games_select_column!]
  distinct: Boolean
  filter: games_bool_exp
  predicate: Int_comparison_exp!
}

"""
aggregate fields of "games_library.games"
"""
type games_aggregate_fields {
  avg: games_avg_fields
  count(columns: [games_select_column!], distinct: Boolean): Int!
  max: games_max_fields
  min: games_min_fields
  stddev: games_stddev_fields
  stddev_pop: games_stddev_pop_fields
  stddev_samp: games_stddev_samp_fields
  sum: games_sum_fields
  var_pop: games_var_pop_fields
  var_samp: games_var_samp_fields
  variance: games_variance_fields
}

"""
order by aggregate values of table "games_library.games"
"""
input games_aggregate_order_by {
  avg: games_avg_order_by
  count: order_by
  max: games_max_order_by
  min: games_min_order_by
  stddev: games_stddev_order_by
  stddev_pop: games_stddev_pop_order_by
  stddev_samp: games_stddev_samp_order_by
  sum: games_sum_order_by
  var_pop: games_var_pop_order_by
  var_samp: games_var_samp_order_by
  variance: games_variance_order_by
}

"""
input type for inserting array relation for remote table "games_library.games"
"""
input games_arr_rel_insert_input {
  data: [games_insert_input!]!

  """upsert condition"""
  on_conflict: games_on_conflict
}

"""aggregate avg on columns"""
type games_avg_fields {
  device_id: Float
  id: Float
  platform_id: Float
  purchase_price: Float
}

"""
order by avg() on columns of table "games_library.games"
"""
input games_avg_order_by {
  device_id: order_by
  id: order_by
  platform_id: order_by
  purchase_price: order_by
}

"""
Boolean expression to filter rows from the table "games_library.games". All fields are combined with a logical 'AND'.
"""
input games_bool_exp {
  _and: [games_bool_exp!]
  _not: games_bool_exp
  _or: [games_bool_exp!]
  cover_image_url: String_comparison_exp
  created_at: timestamptz_comparison_exp
  device: devices_bool_exp
  device_id: Int_comparison_exp
  id: Int_comparison_exp
  platform: platforms_bool_exp
  platform_id: Int_comparison_exp
  purchase_date: date_comparison_exp
  purchase_price: money_comparison_exp
  title: String_comparison_exp
  updated_at: timestamptz_comparison_exp
}

"""
unique or primary key constraints on table "games_library.games"
"""
enum games_constraint {
  """
  unique or primary key constraint on columns "id"
  """
  games_pkey
}

"""
input type for incrementing numeric columns in table "games_library.games"
"""
input games_inc_input {
  device_id: Int
  id: Int
  platform_id: Int
  purchase_price: money
}

"""
input type for inserting data into table "games_library.games"
"""
input games_insert_input {
  cover_image_url: String
  created_at: timestamptz
  device: devices_obj_rel_insert_input
  device_id: Int
  id: Int
  platform: platforms_obj_rel_insert_input
  platform_id: Int
  purchase_date: date
  purchase_price: money
  title: String
  updated_at: timestamptz
}

"""aggregate max on columns"""
type games_max_fields {
  cover_image_url: String
  created_at: timestamptz
  device_id: Int
  id: Int
  platform_id: Int
  purchase_date: date
  purchase_price: money
  title: String
  updated_at: timestamptz
}

"""
order by max() on columns of table "games_library.games"
"""
input games_max_order_by {
  cover_image_url: order_by
  created_at: order_by
  device_id: order_by
  id: order_by
  platform_id: order_by
  purchase_date: order_by
  purchase_price: order_by
  title: order_by
  updated_at: order_by
}

"""aggregate min on columns"""
type games_min_fields {
  cover_image_url: String
  created_at: timestamptz
  device_id: Int
  id: Int
  platform_id: Int
  purchase_date: date
  purchase_price: money
  title: String
  updated_at: timestamptz
}

"""
order by min() on columns of table "games_library.games"
"""
input games_min_order_by {
  cover_image_url: order_by
  created_at: order_by
  device_id: order_by
  id: order_by
  platform_id: order_by
  purchase_date: order_by
  purchase_price: order_by
  title: order_by
  updated_at: order_by
}

"""
response of any mutation on the table "games_library.games"
"""
type games_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [games!]!
}

"""
on_conflict condition type for table "games_library.games"
"""
input games_on_conflict {
  constraint: games_constraint!
  update_columns: [games_update_column!]! = []
  where: games_bool_exp
}

"""Ordering options when selecting data from "games_library.games"."""
input games_order_by {
  cover_image_url: order_by
  created_at: order_by
  device: devices_order_by
  device_id: order_by
  id: order_by
  platform: platforms_order_by
  platform_id: order_by
  purchase_date: order_by
  purchase_price: order_by
  title: order_by
  updated_at: order_by
}

"""primary key columns input for table: games_library.games"""
input games_pk_columns_input {
  id: Int!
}

"""
select columns of table "games_library.games"
"""
enum games_select_column {
  """column name"""
  cover_image_url

  """column name"""
  created_at

  """column name"""
  device_id

  """column name"""
  id

  """column name"""
  platform_id

  """column name"""
  purchase_date

  """column name"""
  purchase_price

  """column name"""
  title

  """column name"""
  updated_at
}

"""
input type for updating data in table "games_library.games"
"""
input games_set_input {
  cover_image_url: String
  created_at: timestamptz
  device_id: Int
  id: Int
  platform_id: Int
  purchase_date: date
  purchase_price: money
  title: String
  updated_at: timestamptz
}

"""aggregate stddev on columns"""
type games_stddev_fields {
  device_id: Float
  id: Float
  platform_id: Float
  purchase_price: Float
}

"""
order by stddev() on columns of table "games_library.games"
"""
input games_stddev_order_by {
  device_id: order_by
  id: order_by
  platform_id: order_by
  purchase_price: order_by
}

"""aggregate stddev_pop on columns"""
type games_stddev_pop_fields {
  device_id: Float
  id: Float
  platform_id: Float
  purchase_price: Float
}

"""
order by stddev_pop() on columns of table "games_library.games"
"""
input games_stddev_pop_order_by {
  device_id: order_by
  id: order_by
  platform_id: order_by
  purchase_price: order_by
}

"""aggregate stddev_samp on columns"""
type games_stddev_samp_fields {
  device_id: Float
  id: Float
  platform_id: Float
  purchase_price: Float
}

"""
order by stddev_samp() on columns of table "games_library.games"
"""
input games_stddev_samp_order_by {
  device_id: order_by
  id: order_by
  platform_id: order_by
  purchase_price: order_by
}

"""
Streaming cursor of the table "games"
"""
input games_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: games_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input games_stream_cursor_value_input {
  cover_image_url: String
  created_at: timestamptz
  device_id: Int
  id: Int
  platform_id: Int
  purchase_date: date
  purchase_price: money
  title: String
  updated_at: timestamptz
}

"""aggregate sum on columns"""
type games_sum_fields {
  device_id: Int
  id: Int
  platform_id: Int
  purchase_price: money
}

"""
order by sum() on columns of table "games_library.games"
"""
input games_sum_order_by {
  device_id: order_by
  id: order_by
  platform_id: order_by
  purchase_price: order_by
}

"""
update columns of table "games_library.games"
"""
enum games_update_column {
  """column name"""
  cover_image_url

  """column name"""
  created_at

  """column name"""
  device_id

  """column name"""
  id

  """column name"""
  platform_id

  """column name"""
  purchase_date

  """column name"""
  purchase_price

  """column name"""
  title

  """column name"""
  updated_at
}

input games_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: games_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: games_set_input

  """filter the rows which have to be updated"""
  where: games_bool_exp!
}

"""aggregate var_pop on columns"""
type games_var_pop_fields {
  device_id: Float
  id: Float
  platform_id: Float
  purchase_price: Float
}

"""
order by var_pop() on columns of table "games_library.games"
"""
input games_var_pop_order_by {
  device_id: order_by
  id: order_by
  platform_id: order_by
  purchase_price: order_by
}

"""aggregate var_samp on columns"""
type games_var_samp_fields {
  device_id: Float
  id: Float
  platform_id: Float
  purchase_price: Float
}

"""
order by var_samp() on columns of table "games_library.games"
"""
input games_var_samp_order_by {
  device_id: order_by
  id: order_by
  platform_id: order_by
  purchase_price: order_by
}

"""aggregate variance on columns"""
type games_variance_fields {
  device_id: Float
  id: Float
  platform_id: Float
  purchase_price: Float
}

"""
order by variance() on columns of table "games_library.games"
"""
input games_variance_order_by {
  device_id: order_by
  id: order_by
  platform_id: order_by
  purchase_price: order_by
}

scalar money

"""
Boolean expression to compare columns of type "money". All fields are combined with logical 'AND'.
"""
input money_comparison_exp {
  _eq: money
  _gt: money
  _gte: money
  _in: [money!]
  _is_null: Boolean
  _lt: money
  _lte: money
  _neq: money
  _nin: [money!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "games_library.devices"
  """
  delete_devices(
    """filter the rows which have to be deleted"""
    where: devices_bool_exp!
  ): devices_mutation_response

  """
  delete single row from the table: "games_library.devices"
  """
  delete_devices_by_pk(id: Int!): devices

  """
  delete data from the table: "games_library.games"
  """
  delete_games(
    """filter the rows which have to be deleted"""
    where: games_bool_exp!
  ): games_mutation_response

  """
  delete single row from the table: "games_library.games"
  """
  delete_games_by_pk(id: Int!): games

  """
  delete data from the table: "games_library.platforms"
  """
  delete_platforms(
    """filter the rows which have to be deleted"""
    where: platforms_bool_exp!
  ): platforms_mutation_response

  """
  delete single row from the table: "games_library.platforms"
  """
  delete_platforms_by_pk(id: Int!): platforms

  """
  insert data into the table: "games_library.devices"
  """
  insert_devices(
    """the rows to be inserted"""
    objects: [devices_insert_input!]!

    """upsert condition"""
    on_conflict: devices_on_conflict
  ): devices_mutation_response

  """
  insert a single row into the table: "games_library.devices"
  """
  insert_devices_one(
    """the row to be inserted"""
    object: devices_insert_input!

    """upsert condition"""
    on_conflict: devices_on_conflict
  ): devices

  """
  insert data into the table: "games_library.games"
  """
  insert_games(
    """the rows to be inserted"""
    objects: [games_insert_input!]!

    """upsert condition"""
    on_conflict: games_on_conflict
  ): games_mutation_response

  """
  insert a single row into the table: "games_library.games"
  """
  insert_games_one(
    """the row to be inserted"""
    object: games_insert_input!

    """upsert condition"""
    on_conflict: games_on_conflict
  ): games

  """
  insert data into the table: "games_library.platforms"
  """
  insert_platforms(
    """the rows to be inserted"""
    objects: [platforms_insert_input!]!

    """upsert condition"""
    on_conflict: platforms_on_conflict
  ): platforms_mutation_response

  """
  insert a single row into the table: "games_library.platforms"
  """
  insert_platforms_one(
    """the row to be inserted"""
    object: platforms_insert_input!

    """upsert condition"""
    on_conflict: platforms_on_conflict
  ): platforms

  """
  update data of the table: "games_library.devices"
  """
  update_devices(
    """increments the numeric columns with given value of the filtered values"""
    _inc: devices_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: devices_set_input

    """filter the rows which have to be updated"""
    where: devices_bool_exp!
  ): devices_mutation_response

  """
  update single row of the table: "games_library.devices"
  """
  update_devices_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: devices_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: devices_set_input
    pk_columns: devices_pk_columns_input!
  ): devices

  """
  update multiples rows of table: "games_library.devices"
  """
  update_devices_many(
    """updates to execute, in order"""
    updates: [devices_updates!]!
  ): [devices_mutation_response]

  """
  update data of the table: "games_library.games"
  """
  update_games(
    """increments the numeric columns with given value of the filtered values"""
    _inc: games_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: games_set_input

    """filter the rows which have to be updated"""
    where: games_bool_exp!
  ): games_mutation_response

  """
  update single row of the table: "games_library.games"
  """
  update_games_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: games_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: games_set_input
    pk_columns: games_pk_columns_input!
  ): games

  """
  update multiples rows of table: "games_library.games"
  """
  update_games_many(
    """updates to execute, in order"""
    updates: [games_updates!]!
  ): [games_mutation_response]

  """
  update data of the table: "games_library.platforms"
  """
  update_platforms(
    """increments the numeric columns with given value of the filtered values"""
    _inc: platforms_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: platforms_set_input

    """filter the rows which have to be updated"""
    where: platforms_bool_exp!
  ): platforms_mutation_response

  """
  update single row of the table: "games_library.platforms"
  """
  update_platforms_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: platforms_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: platforms_set_input
    pk_columns: platforms_pk_columns_input!
  ): platforms

  """
  update multiples rows of table: "games_library.platforms"
  """
  update_platforms_many(
    """updates to execute, in order"""
    updates: [platforms_updates!]!
  ): [platforms_mutation_response]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

"""
columns and relationships of "games_library.platforms"
"""
type platforms {
  """An array relationship"""
  games(
    """distinct select on columns"""
    distinct_on: [games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [games_order_by!]

    """filter the rows returned"""
    where: games_bool_exp
  ): [games!]!

  """An aggregate relationship"""
  games_aggregate(
    """distinct select on columns"""
    distinct_on: [games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [games_order_by!]

    """filter the rows returned"""
    where: games_bool_exp
  ): games_aggregate!
  id: Int!
  name: String!
}

"""
aggregated selection of "games_library.platforms"
"""
type platforms_aggregate {
  aggregate: platforms_aggregate_fields
  nodes: [platforms!]!
}

"""
aggregate fields of "games_library.platforms"
"""
type platforms_aggregate_fields {
  avg: platforms_avg_fields
  count(columns: [platforms_select_column!], distinct: Boolean): Int!
  max: platforms_max_fields
  min: platforms_min_fields
  stddev: platforms_stddev_fields
  stddev_pop: platforms_stddev_pop_fields
  stddev_samp: platforms_stddev_samp_fields
  sum: platforms_sum_fields
  var_pop: platforms_var_pop_fields
  var_samp: platforms_var_samp_fields
  variance: platforms_variance_fields
}

"""aggregate avg on columns"""
type platforms_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "games_library.platforms". All fields are combined with a logical 'AND'.
"""
input platforms_bool_exp {
  _and: [platforms_bool_exp!]
  _not: platforms_bool_exp
  _or: [platforms_bool_exp!]
  games: games_bool_exp
  games_aggregate: games_aggregate_bool_exp
  id: Int_comparison_exp
  name: String_comparison_exp
}

"""
unique or primary key constraints on table "games_library.platforms"
"""
enum platforms_constraint {
  """
  unique or primary key constraint on columns "name"
  """
  platforms_name_key

  """
  unique or primary key constraint on columns "id"
  """
  platforms_pkey
}

"""
input type for incrementing numeric columns in table "games_library.platforms"
"""
input platforms_inc_input {
  id: Int
}

"""
input type for inserting data into table "games_library.platforms"
"""
input platforms_insert_input {
  games: games_arr_rel_insert_input
  id: Int
  name: String
}

"""aggregate max on columns"""
type platforms_max_fields {
  id: Int
  name: String
}

"""aggregate min on columns"""
type platforms_min_fields {
  id: Int
  name: String
}

"""
response of any mutation on the table "games_library.platforms"
"""
type platforms_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [platforms!]!
}

"""
input type for inserting object relation for remote table "games_library.platforms"
"""
input platforms_obj_rel_insert_input {
  data: platforms_insert_input!

  """upsert condition"""
  on_conflict: platforms_on_conflict
}

"""
on_conflict condition type for table "games_library.platforms"
"""
input platforms_on_conflict {
  constraint: platforms_constraint!
  update_columns: [platforms_update_column!]! = []
  where: platforms_bool_exp
}

"""Ordering options when selecting data from "games_library.platforms"."""
input platforms_order_by {
  games_aggregate: games_aggregate_order_by
  id: order_by
  name: order_by
}

"""primary key columns input for table: games_library.platforms"""
input platforms_pk_columns_input {
  id: Int!
}

"""
select columns of table "games_library.platforms"
"""
enum platforms_select_column {
  """column name"""
  id

  """column name"""
  name
}

"""
input type for updating data in table "games_library.platforms"
"""
input platforms_set_input {
  id: Int
  name: String
}

"""aggregate stddev on columns"""
type platforms_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type platforms_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type platforms_stddev_samp_fields {
  id: Float
}

"""
Streaming cursor of the table "platforms"
"""
input platforms_stream_cursor_input {
  """Stream column input with initial value"""
  initial_value: platforms_stream_cursor_value_input!

  """cursor ordering"""
  ordering: cursor_ordering
}

"""Initial value of the column from where the streaming should start"""
input platforms_stream_cursor_value_input {
  id: Int
  name: String
}

"""aggregate sum on columns"""
type platforms_sum_fields {
  id: Int
}

"""
update columns of table "games_library.platforms"
"""
enum platforms_update_column {
  """column name"""
  id

  """column name"""
  name
}

input platforms_updates {
  """increments the numeric columns with given value of the filtered values"""
  _inc: platforms_inc_input

  """sets the columns of the filtered rows to the given values"""
  _set: platforms_set_input

  """filter the rows which have to be updated"""
  where: platforms_bool_exp!
}

"""aggregate var_pop on columns"""
type platforms_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type platforms_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type platforms_variance_fields {
  id: Float
}

type query_root {
  """
  fetch data from the table: "games_library.devices"
  """
  devices(
    """distinct select on columns"""
    distinct_on: [devices_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [devices_order_by!]

    """filter the rows returned"""
    where: devices_bool_exp
  ): [devices!]!

  """
  fetch aggregated fields from the table: "games_library.devices"
  """
  devices_aggregate(
    """distinct select on columns"""
    distinct_on: [devices_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [devices_order_by!]

    """filter the rows returned"""
    where: devices_bool_exp
  ): devices_aggregate!

  """
  fetch data from the table: "games_library.devices" using primary key columns
  """
  devices_by_pk(id: Int!): devices

  """An array relationship"""
  games(
    """distinct select on columns"""
    distinct_on: [games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [games_order_by!]

    """filter the rows returned"""
    where: games_bool_exp
  ): [games!]!

  """An aggregate relationship"""
  games_aggregate(
    """distinct select on columns"""
    distinct_on: [games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [games_order_by!]

    """filter the rows returned"""
    where: games_bool_exp
  ): games_aggregate!

  """
  fetch data from the table: "games_library.games" using primary key columns
  """
  games_by_pk(id: Int!): games

  """
  fetch data from the table: "games_library.platforms"
  """
  platforms(
    """distinct select on columns"""
    distinct_on: [platforms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [platforms_order_by!]

    """filter the rows returned"""
    where: platforms_bool_exp
  ): [platforms!]!

  """
  fetch aggregated fields from the table: "games_library.platforms"
  """
  platforms_aggregate(
    """distinct select on columns"""
    distinct_on: [platforms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [platforms_order_by!]

    """filter the rows returned"""
    where: platforms_bool_exp
  ): platforms_aggregate!

  """
  fetch data from the table: "games_library.platforms" using primary key columns
  """
  platforms_by_pk(id: Int!): platforms
}

type subscription_root {
  """
  fetch data from the table: "games_library.devices"
  """
  devices(
    """distinct select on columns"""
    distinct_on: [devices_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [devices_order_by!]

    """filter the rows returned"""
    where: devices_bool_exp
  ): [devices!]!

  """
  fetch aggregated fields from the table: "games_library.devices"
  """
  devices_aggregate(
    """distinct select on columns"""
    distinct_on: [devices_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [devices_order_by!]

    """filter the rows returned"""
    where: devices_bool_exp
  ): devices_aggregate!

  """
  fetch data from the table: "games_library.devices" using primary key columns
  """
  devices_by_pk(id: Int!): devices

  """
  fetch data from the table in a streaming manner: "games_library.devices"
  """
  devices_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [devices_stream_cursor_input]!

    """filter the rows returned"""
    where: devices_bool_exp
  ): [devices!]!

  """An array relationship"""
  games(
    """distinct select on columns"""
    distinct_on: [games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [games_order_by!]

    """filter the rows returned"""
    where: games_bool_exp
  ): [games!]!

  """An aggregate relationship"""
  games_aggregate(
    """distinct select on columns"""
    distinct_on: [games_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [games_order_by!]

    """filter the rows returned"""
    where: games_bool_exp
  ): games_aggregate!

  """
  fetch data from the table: "games_library.games" using primary key columns
  """
  games_by_pk(id: Int!): games

  """
  fetch data from the table in a streaming manner: "games_library.games"
  """
  games_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [games_stream_cursor_input]!

    """filter the rows returned"""
    where: games_bool_exp
  ): [games!]!

  """
  fetch data from the table: "games_library.platforms"
  """
  platforms(
    """distinct select on columns"""
    distinct_on: [platforms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [platforms_order_by!]

    """filter the rows returned"""
    where: platforms_bool_exp
  ): [platforms!]!

  """
  fetch aggregated fields from the table: "games_library.platforms"
  """
  platforms_aggregate(
    """distinct select on columns"""
    distinct_on: [platforms_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [platforms_order_by!]

    """filter the rows returned"""
    where: platforms_bool_exp
  ): platforms_aggregate!

  """
  fetch data from the table: "games_library.platforms" using primary key columns
  """
  platforms_by_pk(id: Int!): platforms

  """
  fetch data from the table in a streaming manner: "games_library.platforms"
  """
  platforms_stream(
    """maximum number of rows returned in a single batch"""
    batch_size: Int!

    """cursor to stream the results returned by the query"""
    cursor: [platforms_stream_cursor_input]!

    """filter the rows returned"""
    where: platforms_bool_exp
  ): [platforms!]!
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}